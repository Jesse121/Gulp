/**
 * @authors Jesse (jesse131work@163.com)
 * @date    2016-03-07 09:23:44
 */



// 变量  
// 变量允许我们单独定义一系列通用的样式，然后在需要的时候去调用。
/* 常用 */
@color:blue;
 .bordered {
    color:@color;
   border-top: dotted 1px black;
   border-bottom: solid 2px black;
 }
 
 // 混合
 // 混合可以将一个定义好的class A轻松的引入到另一个class B中，从而简单实现class B继承class A中的所有
/* 常用 */
 #menu a {
   display:block;
   color: red;
   width:200px;
   background-color: blue;
   height:300px;
   -webkit-transform: rotate(0deg);
   -o-transform: rotate(0deg);
   -moz-transform: rotate(0deg);
   -ms-transform: rotate(0deg);
   tranform: rotate(0deg);
   .bordered;
 }


/*  模式匹配和导引表达式
*   我们想根据传入的参数来改变混合的默认呈现 
*只有被匹配的混合才会被使用。变量可以匹配任意的传入值，而变量以外的固定值就仅仅匹配与其相等的传入值
*/

//它只接受dark做为首参
.mixin (dark, @color) {
  color: darken(@color, 10%);
}
// 它只接受light
.mixin (light, @color) {
  color: lighten(@color, 10%);
}
// 它接受任意值
.mixin (@_, @color) {
  display: inline;
}

@switch:light;
.class{
   .mixin(@switch,#888);
}
/* 引导模式*/

/* 常用 */
/* 嵌套规则
*  LESS 可以让我们以嵌套的方式编写层叠样式 
*/
#header {
  color: black;
  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
    &:hover { text-decoration: none }
  }
} 
/*运算
*任何数字、颜色或者变量都可以参与运算
*/
   @base: 5%;
   @filler: @base * 2;
   @other: @base + @filler;
#header{
   color: #888 / 4;
   background-color: @base + #111;
   height: 100% / 2 + @filler;
}
/* color函数 */

/* Math 函数 */
#header{
   width:round(20.3);
   width:ceil(20.3);
   width:floor(26.3);
   width:percentage(.5)
}
/* 常用 */
/* 命名空间
有时候，你可能为了更好组织CSS或者单纯是为了更好的封装，将一些变量或者混合模块打包起来 */
#bundle {
  .button () {
    display: block;
    border: 1px solid black;
    background-color: grey;
    background-images:url(../img/bg.jpg);
    &:hover { background-color: white }
  }
  .tab (){
      color:red; 
   }
}
#header a {
  color: orange;
  #bundle > .button;
  #bundle > .tab;
}
/* 常用 */
/* 作用域 
LESS 中的作用域跟其他编程语言非常类似，
首先会从本地查找变量或者混合模块，
如果没找到的话会去父级作用域中查找，直到找到为止.
*/
@var: red;
#page {
  @var: white;
  #header {
    color: @var; // white
  }
}
#footer {
  color: @var; // red  
}
/* 常用 */
/* 避免编译  用于浏览器兼容性调试中
 有时候我们需要输出一些不正确的CSS语法或者使用一些 LESS不认识的专有语法.
 要输出这样的值我们可以在字符串前加上一个 ~ */
 .class {
   filter: ~"ms:alwaysHasItsOwnSyntax.For.Stuff()";
 } 